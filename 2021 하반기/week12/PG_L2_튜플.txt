import java.util.*;
class Solution {
    public int[] solution(String s) {
        String str[] = s.split("},");
        Set<Integer>[] sets = new HashSet[str.length]; //집합에 쪼개서 넣기
        for(int i=0; i<sets.length; i++){
            sets[i] = new HashSet();
            str[i] = str[i].replaceAll("[{}]","");
            String[] nums = str[i].split(",");
            for(String n : nums) sets[i].add(Integer.parseInt(n));
        }
        //집합 크기 작은 순서대로 정렬
        Arrays.sort(sets, (o1, o2) -> o1.size() - o2.size());
        int[] answer = new int[sets[sets.length-1].size()];
        answer[0] = (int) sets[0].toArray()[0]; //하나있는 집합이 무조건 맨 앞(a1)
        for(int i=1; i<sets.length; i++){
            Set<Integer> tmp = new HashSet(sets[i]);
            //(현재집합 원소 - 이전집합 원소)해서 하나 남은 원소가 그 다음 원소
            tmp.removeAll(sets[i-1]); 
            answer[i] = (int) tmp.toArray()[0];
        }
        return answer;
    }
}