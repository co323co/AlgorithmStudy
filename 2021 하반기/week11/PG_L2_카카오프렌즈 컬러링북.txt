import java.util.*;
class Solution {
    static boolean v[][];
    static int map[][];
    static int N, M; //세로, 가로
    public int[] solution(int m, int n, int[][] picture) {
        int numberOfArea = 0;
        int maxSizeOfOneArea = 0;
        N=m;
        M=n;
        map = picture;
        v = new boolean[m][n];
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(!v[i][j] && map[i][j]!=0){
                    int area = countArea(i,j);
                    numberOfArea++;
                    maxSizeOfOneArea = Math.max(maxSizeOfOneArea, area);
                }
            }
        }
        int[] answer = new int[2];
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;
        return answer;
    }
    
    static class Pixel{
        int r,c;
        public Pixel(int _r, int _c){
            r=_r;
            c=_c;
        }
    }
    static int[] dr = {-1,1,0,0};
    static int[] dc = {0,0,-1,1};
    //DFS
    static public int countArea(int r, int c){
        int color = map[r][c];
        Queue<Pixel> q = new LinkedList<Pixel>();
        q.add(new Pixel(r,c));
        v[r][c] = true;
        int cnt = 0;
        while(!q.isEmpty()){
            cnt++;
            Pixel curr = q.poll();
            // System.out.println("("+curr.r+","+curr.c+")");
            for(int d=0; d<4; d++){
                int nr = curr.r+dr[d];
                int nc = curr.c+dc[d];
                if(nr<0 || nr>=N || nc<0 || nc>=M || v[nr][nc]) continue;
                if(color==map[nr][nc]) {
                    v[nr][nc]=true;
                    q.add(new Pixel(nr,nc));
                }
            }
        }
        // System.out.println("c:"+color+", cnt:"+cnt);
        return cnt;
    }
}